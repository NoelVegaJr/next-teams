// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profile       Profile?  @relation(fields: [profileId], references: [id])
  profileId     String?   @unique
}

enum Status {
  online
  offline
  away
  sleeping
}

model Profile {
  id                         String                    @id @default(cuid())
  companyId                  String
  name                       String
  role                       String
  phone                      String
  email                      String                    @unique
  address                    String
  status                     Status                    @default(offline)
  avatar                     String?
  banner                     String?
  User                       User?
  ParticipatingConversations ConversationParticipant[]
  Contributer                Contributer[]
  company                    Company                   @relation(fields: [companyId], references: [id])
}

model Company {
  id        String    @id @default(cuid())
  name      String    @unique
  address   String
  createdAt DateTime  @default(now())
  phone     String
  image     String?
  banner    String?
  staff     Profile[]
  projects  Project[]
}

model Inquiry {
  id          String   @id @default(cuid())
  companyName String
  name        String
  email       String
  address     String
  createdAt   DateTime @default(now())
  phone       String
  status      String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id           String        @id @default(cuid())
  name         String
  createdAt    DateTime      @default(now())
  image        String?
  contributors Contributer[]
  conversation Conversation?
  taskboard    Taskboard?
  taskboardId  String?       @unique
  companyId    String
  company      Company       @relation(fields: [companyId], references: [id])
}

model Contributer {
  id           String         @id @default(cuid())
  profileId    String
  projectId    String
  project      Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  profile      Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  TaskAssignee TaskAssignee[]
}

model Conversation {
  id           String                    @id @default(cuid())
  participants ConversationParticipant[]
  messages     Message[]
  Project      Project                   @relation(fields: [projectId], references: [id])
  projectId    String                    @unique
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  profileId      String
  profile        Profile      @relation(fields: [profileId], references: [id])
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  messages       Message[]
}

model Message {
  id             String                  @id @default(cuid())
  date           DateTime                @default(now())
  text           String                  @db.Text
  conversationId String
  conversation   Conversation            @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  participantId  String
  participant    ConversationParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
}

model Taskboard {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  name      String
  projectId String     @unique
  Project   Project    @relation(fields: [projectId], references: [id])
  TaskLists TaskList[]
}

model TaskList {
  id          String    @id @default(cuid())
  createAt    DateTime  @default(now())
  name        String
  tasks       Task[]
  taskBoardId String
  taskboard   Taskboard @relation(fields: [taskBoardId], references: [id])
  index       Int       @default(10)
}

model Task {
  id                String              @id @default(cuid())
  taskListId        String
  createAt          DateTime            @default(now())
  name              String
  description       String?             @db.Text
  index             Int                 @default(9999)
  taskCheckListItem TaskCheckListItem[]
  taskComments      TaskComments[]
  taskList          TaskList            @relation(fields: [taskListId], references: [id])
  assignees         TaskAssignee[]
  isComplete        Boolean             @default(false)
}

model TaskAssignee {
  id            String      @id @default(cuid())
  contributorId String
  taskId        String
  task          Task        @relation(fields: [taskId], references: [id])
  Contributor   Contributer @relation(fields: [contributorId], references: [id])
}

model TaskCheckListItem {
  id         String  @id @default(cuid())
  taskId     String
  task       Task    @relation(fields: [taskId], references: [id])
  text       String
  index      Int
  isComplete Boolean
}

model TaskComments {
  id        String   @id @default(cuid())
  createdAt DateTime
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  text      String   @db.Text
}
