// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String? @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  friends Friendship[]
  profile Profile? 
  conversations ConversationParticipant[]
  status String?
}



model Profile {
  id            String    @id @default(cuid())
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  servers       ServerMember[]
  workspaces    WorkspaceMember[]
  channels      WorkspaceChannelMember[]
  friends Friendship[]
  SentFriendRequests FriendRequest[] @relation("FR_Sender")
  RecievingFriendRequests FriendRequest[] @relation("FR_Recipient")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Friendship {
   id            String    @id @default(cuid())
   user1Id          String
   user2Id         String
   user1 Profile @relation(fields: [user1Id], references: [userId], onDelete: Cascade)
   friend User @relation(fields: [user2Id], references: [id], onDelete: Cascade)
}

model FriendRequest {
   id            String    @id @default(cuid())
   senderId String
   recipientId String
   status String
   sender Profile @relation("FR_Sender",fields: [senderId], references: [userId], onDelete: Cascade)
   recipient Profile @relation("FR_Recipient", fields: [recipientId], references: [userId], onDelete: Cascade)
}

model Server {
  id            String    @id @default(cuid())
  name          String
  createdAt DateTime  @default(now())
  image         String
  members ServerMember[]
  workspace Workspace[]
}

model ServerMember {
    id            String    @id @default(cuid())
    userId String
    serverId String
    server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
    user Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
    
}

model Workspace {
  id            String    @id @default(cuid())
  name          String
  createdAt DateTime  @default(now())
  image         String
  members WorkspaceMember[]
  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  channels WorkspaceChannel[]
}

model WorkspaceMember {
    id            String    @id @default(cuid())
    userId String
    workspaceId String
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    user Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model WorkspaceChannel {
    id            String    @id @default(cuid())
    workspaceId String
    name String
    createdAt DateTime  @default(now())
    members WorkspaceChannelMember[]
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model WorkspaceChannelMember {
    id          String    @id @default(cuid())
    channelId String
    joinAt DateTime  @default(now())
    userId String
    user Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
    channel WorkspaceChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
}

model Conversation {
  id          String    @id @default(cuid())
  participants ConversationParticipant[]
  // messageGroups MessageGroup[]
  messages Message[]
}

model ConversationParticipant {
  id          String    @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  // messageGroups MessageGroup[]
  messages Message[]
}


// model MessageGroup {
//   id          String    @id @default(cuid())
//   date DateTime @default(now())
//   conversationParticipantId String
//   sender ConversationParticipant @relation(fields: [conversationParticipantId], references: [id], onDelete: Cascade)
//   messages Message[]
//   conversationId String
//   conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
// }


model Message {
  id          String    @id @default(cuid())
  date DateTime @default(now())
  text String @db.Text
  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  participantId String
  participant ConversationParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  // messageGroupId String
  // messageGroup MessageGroup @relation(fields: [messageGroupId], references: [id], onDelete: Cascade)
}